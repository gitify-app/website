---
import axios from 'axios';
import Bowser from 'bowser';
import { format, parseISO } from 'date-fns';

import Logo from './Logo.astro';
import DownloadIcon from '../icons/Download.astro';
import type { Assets, LatestRelease } from '../types';
import { Image } from 'astro:assets';

import mockup from '../assets/mockup.png';

const REPO_URL =
  'https://api.github.com/repos/gitify-app/gitify/releases/latest';
const REPO_RELEASES_URL =
  'https://github.com/gitify-app/gitify/releases/latest';

interface DownloadLink {
  os: string;
  name: string;
  url: string | null;
}

interface DownloadLinks {
  primary: DownloadLink[];
  alt: DownloadLink[];
}

const getDownloadLinks = (assets: Assets[]): DownloadLinks => {
  const getAssetLink = (filenameRegex: RegExp): string | null => {
    const asset = assets.find((item) => item.name.match(filenameRegex));
    return asset ? asset.browser_download_url : null;
  };

  const supportedOSs: DownloadLink[] = [
    {
      os: 'macOS',
      name: 'macOS (Universal)',
      url: getAssetLink(/Gitify-\d.\d.\d-universal.dmg/g),
    },
    {
      os: 'Windows',
      name: 'Windows',
      url: getAssetLink(/Gitify-Setup-\d.\d.\d.exe/g),
    },
    {
      os: 'Linux',
      name: 'Linux',
      url: getAssetLink(/Gitify-\d.\d.\d.AppImage/g),
    },
  ];

  const isWindowAvailable = typeof window !== 'undefined' && window.navigator;
  const currentOs = isWindowAvailable
    ? Bowser.parse(window.navigator.userAgent).os.name
    : 'macOS'; // macOS, Windows, Linux

  const primaryLinks = supportedOSs.filter(
    ({ os, url }) => url && os === currentOs,
  );
  const primaryLinksOSs = primaryLinks.map(({ os }) => os);
  const alt = supportedOSs.filter(
    ({ os, url }) => !primaryLinksOSs.includes(os) && url,
  );

  return {
    primary: primaryLinks.length ? primaryLinks : [supportedOSs[0]],
    alt,
  };
};

interface HeroData {
  downloadLinks: DownloadLinks;
  version: string;
  releaseDate: string;
  failed: boolean;
}

const loadInitialData = async (): Promise<HeroData> => {
  try {
    const response = await axios(REPO_URL);
    const data: LatestRelease = response.data;
    const parsedDate = parseISO(data.published_at.slice(0, -1));
    const downloadLinks = getDownloadLinks(data.assets);
    return {
      downloadLinks,
      version: data.tag_name,
      releaseDate: format(parsedDate, 'dd/MM/yyyy'),
      failed: false,
    };
  } catch (_) {
    return {
      downloadLinks: undefined!,
      version: undefined!,
      releaseDate: undefined!,
      failed: true,
    };
  }
};

const { downloadLinks, version, releaseDate, failed } = await loadInitialData();

const releaseDetailsClassName = 'text-sm mt-4';
---

<div class="bg-gray-100">
  <div
    class="container flex flex-col md:flex-row lg:items-center max-w-5xl mx-auto px-12 py-8 lg:py-16"
  >
    <div class="flex flex-col justify-center flex-grow">
      <Logo className="w-16 lg:w-24 mb-4" isDark />

      <h1 class="text-2xl lg:text-4xl font-semibold">Gitify</h1>

      <h2 class="mt-2 text-xl lg:text-2xl font-light">
        Your GitHub notifications <br /> on your menu bar.
      </h2>

      {
        !failed && version && (
          <div class={releaseDetailsClassName}>
            <div class="flex">
              {downloadLinks.primary.map((item, index) => {
                return item.url ? (
                  <a
                    href={item.url}
                    class={`flex items-center mb-3 px-4 py-3 font-semibold text-white rounded-md bg-green-700 hover:bg-green-800 ${
                      downloadLinks.primary.length > 1 &&
                      downloadLinks.primary.length - 1 === index
                        ? 'md:ml-4'
                        : ''
                    }`}
                  >
                    <DownloadIcon className="w-4 h-4 mr-2" />{' '}
                    <span>{item.name}</span>
                  </a>
                ) : null;
              })}
            </div>

            <div>
              <div>Current Version: {version}.</div>
              <div>Released on {releaseDate}.</div>
              {downloadLinks.alt.length > 0 && (
                <div>
                  Also available on{' '}
                  {downloadLinks.alt
                    .map((platform) => (
                      <a href={platform.url!}>{platform.name}</a>
                    ))
                    .reduce((prev, next) => [prev, ', ', next] as any)
                    .concat('.')}
                </div>
              )}
            </div>
          </div>
        )
      }

      {
        failed && (
          <div class={releaseDetailsClassName}>
            <div class="flex">
              <a
                class="flex items-center mb-3 px-4 py-3 font-semibold text-white rounded-md bg-green-700 hover:bg-green-800"
                href={REPO_RELEASES_URL}
              >
                <DownloadIcon className="w-4 h-4 mr-2" />{' '}
                <span>View GitHub Releases</span>
              </a>
            </div>

            <div>
              <div>Couldn&apos;t get latest version.</div>
            </div>
          </div>
        )
      }
    </div>

    <div class="">
      <Image
        class="block w-full max-w-sm mx-auto h-auto shadow-2xl rounded-xl transform rotate-6 mt-16 mb-8 md:ml-16 md:my-16"
        src={mockup}
        alt="Gitify - Mock up/Screenshot"
        width="500"
        height="400"
      />
    </div>
  </div>
</div>
